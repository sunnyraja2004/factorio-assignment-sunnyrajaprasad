# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NvK0ZenoVq5U0JvX2TNqIe3l-Tp2x6Kx
"""

import json, subprocess, sys, os, textwrap

CMD = os.environ.get("FACTORY_CMD", "python part2_assignment/factory/main.py")

def run_case(case):
    p = subprocess.run(CMD.split(), input=json.dumps(case).encode(), stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
    return json.loads(p.stdout.decode())

def test_sample():
    case = {
      "machines": {
        "assembler_1": {"crafts_per_min": 30},
        "chemical": {"crafts_per_min": 60}
      },
      "recipes": {
        "iron_plate": {
          "machine": "chemical",
          "time_s": 3.2,
          "in": {"iron_ore": 1},
          "out": {"iron_plate": 1}
        },
        "copper_plate": {
          "machine": "chemical",
          "time_s": 3.2,
          "in": {"copper_ore": 1},
          "out": {"copper_plate": 1}
        },
        "green_circuit": {
          "machine": "assembler_1",
          "time_s": 0.5,
          "in": {"iron_plate": 1, "copper_plate": 3},
          "out": {"green_circuit": 1}
        }
      },
      "modules": {
        "assembler_1": {"prod": 0.1, "speed": 0.15},
        "chemical": {"prod": 0.2, "speed": 0.1}
      },
      "limits": {
        "raw_supply_per_min": {"iron_ore": 5000, "copper_ore": 5000},
        "max_machines": {"assembler_1": 300, "chemical": 300}
      },
      "target": {"item": "green_circuit", "rate_per_min": 1800}
    }
    out = run_case(case)
    assert out["status"] == "ok"
    # determinism checks
    assert set(out["per_recipe_crafts_per_min"].keys()) == {"iron_plate","copper_plate","green_circuit"}
    assert "chemical" in out["per_machine_counts"]
    assert "assembler_1" in out["per_machine_counts"]
    # caps respected
    assert out["per_machine_counts"]["chemical"] <= 300 + 1e-9
    assert out["raw_consumption_per_min"]["iron_ore"] <= 5000 + 1e-9