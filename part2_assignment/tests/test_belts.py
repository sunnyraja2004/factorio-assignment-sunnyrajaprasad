# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NvK0ZenoVq5U0JvX2TNqIe3l-Tp2x6Kx
"""

import json, subprocess, os

CMD = os.environ.get("BELTS_CMD", "python part2_assignment/belts/main.py")

def run_case(case):
    p = subprocess.run(CMD.split(), input=json.dumps(case).encode(), stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
    return json.loads(p.stdout.decode())

def test_basic_flow():
    case = {
        "nodes": ["s1","s2","a","b","c","sink"],
        "edges": [
            {"from":"s1","to":"a","lo":0,"hi":900},
            {"from":"a","to":"b","lo":0,"hi":900},
            {"from":"b","to":"sink","lo":0,"hi":900},
            {"from":"s2","to":"a","lo":0,"hi":600},
            {"from":"a","to":"c","lo":0,"hi":600},
            {"from":"c","to":"sink","lo":0,"hi":600}
        ],
        "sources": {"s1":900,"s2":600},
        "sink": "sink",
        "node_caps": {"a": 2000, "b": 2000, "c": 2000}
    }
    out = run_case(case)
    assert out["status"] == "ok"
    assert abs(out["max_flow_per_min"] - 1500) < 1e-6
    # check feasibility of bounds
    for e in case["edges"]:
        f = [x for x in out["flows"] if x["from"]==e["from"] and x["to"]==e["to"]][0]["flow"]
        assert e["lo"] - 1e-9 <= f <= e["hi"] + 1e-9